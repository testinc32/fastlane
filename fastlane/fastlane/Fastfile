skip_docs

desc "Increment the version number of this gem"
lane :bump do |options|
  tool_name = options[:tool] || detect_tool
  path = "./lib/#{tool_name}/version.rb"

  latest_release = current_version(tool: tool_name)
  `open https://github.com/#{github_url(tool: tool_name)}/compare/#{latest_release}...master`

  local_version = version_get_podspec(path: path) # here, to not show the lane change

  puts "Live Version: #{latest_release}"
  puts "Local Version: #{local_version}"

  bump_type ||= 'minor' if prompt(text: "New Feature?", boolean: true)
  bump_type ||= 'patch' if bump_type.nil? && prompt(text: "Bugfix/Improvements?", boolean: true)

  if bump_type
    version_bump_podspec(path: path, bump_type: bump_type)
    git_commit(path: path,
               message: "Version Bump by fastlane")
    push_to_git_remote
  else
    puts "Doing nothing..."
  end
end

desc "Display a changelog for a tool since its last release."
desc "Run from a tool directory or specify (e.g. tool:deliver)"
lane :show_changelog do |options|
  tool_name = options[:tool] || detect_tool
  old_version = current_version(tool: tool_name)

  print_release_changelog(tool: tool_name, old_version: old_version)
end

desc "Does everything that's needed for a release"
desc "This includes running tests and verifying the GitHub release"
lane :release do |options|
  update_fastlane

  # Fetching all information required for the release
  #
  tool_name = options[:tool] || detect_tool

  # Verifying RubyGems version
  #
  validate_repo(tool_name: tool_name)

  require "../lib/#{tool_name}/version"
  version = module_ref(tool_name: tool_name)::VERSION
  old_version = current_version(tool: tool_name)
  puts "Deploying #{tool_name} #{version}"
  if Gem::Version.new(version) <= Gem::Version.new(old_version)
    UI.user_error!("Version number #{version} was already deployed")
  end

  # Git verification
  #
  ensure_git_status_clean
  ensure_git_branch(branch: 'master')
  git_pull
  # Actual release
  #
  sh "gem push ../pkg/#{tool_name}-#{version}.gem"
  # Then push to git remote
  #
  push_to_git_remote

  # Preparing GitHub Release
  #
  github_release = get_github_release(url: github_url(tool: tool_name), version: version)
  if (github_release || {}).fetch('body', '').length == 0
    print_release_changelog(tool: tool_name, old_version: old_version)

    title = prompt(text: 'Title: ')
    description = prompt(text: "Please enter a changelog: ",
                         multi_line_end_keyword: "END")

    github_release = set_github_release(
      repository_name: github_url(tool: tool_name),
      name: [version, title].join(" "),
      tag_name: version,
      description: description,
      is_draft: false
    )

    release_url = github_release['html_url']
    clipboard(value: release_url)

    message = [title, description, release_url].join("\n\n")
    add_fastlane_git_tag(tag: "#{tool_name}/#{version}", message: message)
  end

  # After publishing
  #
  if ENV['SLACK_URL']
    slack(
      channel: "releases",
      default_payloads: [],
      message: "Successfully released [#{tool_name} #{version}](#{release_url}) :rocket:",
      payload: {
        "New" => github_release['body']
      }
    )
  end

  puts "You can now tweet:".green
  tag_url = "https://github.com/fastlane/fastlane/releases/tag/#{tool_name}/#{version}"
  puts "[#{tool_name}] #{github_release['name']} #{tag_url}"
end

error do |lane, exception|
  if ENV['SLACK_URL']
    slack(channel: "testing", message: exception.to_s, success: false)
  end
end

desc "Verifies all tests pass and the current state of the repo is valid"
private_lane :validate_repo do |options|
  # Verifying that no debug code is in the code base
  #
  ensure_no_debug_code(text: "pry", extension: ".rb", path: "./lib/") # debugging code
  ensure_no_debug_code(text: "TODO", extension: ".rb", path: "./lib/") # TODOs
  ensure_no_debug_code(text: "now: ", extension: ".rb", path: "./lib/") # rspec focus
  ensure_no_debug_code(text: "<<<<<<<", extension: ".rb", path: "./lib/") # Merge conflict

  rubocop

  # Verifying the --help command
  #
  tool_name = options[:tool_name]
  binary_path = File.join("..", "bin", tool_name)
  unless no_binary.include? tool_name
    content = sh "PAGER=cat #{binary_path} --help"
    ["--version", "https://fastlane.tools", tool_name].each do |current|
      UI.user_error!("--help missing information: '#{current}'") unless content.include? current
    end
  end

  # Running ruby things
  #
  sh "cd .. && bundle install"
  sh "cd .. && rake install"

  # Run the tests
  #
  sh "cd .. && bundle exec rspec"
end

desc "e.g. fastlane/deliver"
private_lane :github_url do |options|
  if options[:tool] == "fastlane"
    "fastlane/fastlane"
  else
    File.join("fastlane-old", options[:tool])
  end
end

desc "Get the version number of the last release"
private_lane :current_version do |options|
  puts "Checking the latest version on RubyGems"
  download(url: "https://rubygems.org/api/v1/gems/#{options[:tool]}.json")["version"]
end

desc "All repos that don't have a binary to test"
private_lane :no_binary do
  ['fastlane_core', 'spaceship', 'credentials_manager']
end

desc "Detects the name of the tool based on the current directory"
private_lane :detect_tool do
  Dir["../*.gemspec"].last.match(/(\w+).gemspec/)[1]
end

desc "Get a reference to the module of this tool"
desc "This method can be overwritten by the individual Fastfiles of the tools (e.g. PEM)"
private_lane :module_ref do |options|
  Object.const_get(options[:tool_name].split('_').collect(&:capitalize).join)
end

desc "Print out the changelog since the last tagged release"
private_lane :print_release_changelog do |options|
  tool_name = options[:tool]
  old_version = options[:old_version]

  changes = sh("git log --pretty='* %s' #{tool_name}/#{old_version}...HEAD --no-merges ..").gsub("\n\n", "\n")
  puts "Changes since release #{old_version}:\n#{changes}"
end

desc "Add a git tag in the fastlane repo for this release"
private_lane :add_fastlane_git_tag do |options|
  `git tag -am #{options[:message].shellescape} #{options[:tag].shellescape}`
  push_git_tags
end
